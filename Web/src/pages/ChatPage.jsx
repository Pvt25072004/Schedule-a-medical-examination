import React, { useState, useRef, useEffect } from 'react';
import { Send, Bot, User as UserIcon } from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';
import Layout from '../components/common/Layout';
import Button from '../components/common/Button';
import { PAGES } from '../utils/constants';

const ChatPage = ({ navigate }) => {
  const { user } = useAuth();
  const [messages, setMessages] = useState([
    {
      id: 1,
      text: 'Xin ch√†o! T√¥i l√† tr·ª£ l√Ω ·∫£o c·ªßa STL Clinic. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:',
      sender: 'bot',
      timestamp: new Date()
    },
    {
      id: 2,
      text: '‚Ä¢ T∆∞ v·∫•n v·ªÅ tri·ªáu ch·ª©ng b·ªánh\n‚Ä¢ H∆∞·ªõng d·∫´n ƒë·∫∑t l·ªãch kh√°m\n‚Ä¢ Th√¥ng tin v·ªÅ c√°c d·ªãch v·ª•\n‚Ä¢ C√¢u h·ªèi v·ªÅ s·ª©c kh·ªèe\n\nB·∫°n c·∫ßn h·ªó tr·ª£ g√¨ h√¥m nay?',
      sender: 'bot',
      timestamp: new Date()
    }
  ]);
  const [inputText, setInputText] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const quickReplies = [
    'ƒê·∫∑t l·ªãch kh√°m',
    'Tri·ªáu ch·ª©ng ƒëau ƒë·∫ßu',
    'Gi√° d·ªãch v·ª•',
    'ƒê·ªãa ch·ªâ ph√≤ng kh√°m'
  ];

  const getBotResponse = (userMessage) => {
    const msg = userMessage.toLowerCase();
    
    if (msg.includes('ƒë·∫∑t l·ªãch') || msg.includes('booking')) {
      return 'ƒê·ªÉ ƒë·∫∑t l·ªãch kh√°m, b·∫°n c√≥ th·ªÉ:\n1. Nh·∫•n v√†o n√∫t "ƒê·∫∑t l·ªãch kh√°m" ·ªü trang ch·ªß\n2. Ch·ªçn b√°c sƒ© v√† th·ªùi gian ph√π h·ª£p\n3. X√°c nh·∫≠n th√¥ng tin\n\nB·∫°n c√≥ mu·ªën t√¥i chuy·ªÉn b·∫°n ƒë·∫øn trang ƒë·∫∑t l·ªãch kh√¥ng?';
    }
    
    if (msg.includes('ƒëau ƒë·∫ßu') || msg.includes('tri·ªáu ch·ª©ng')) {
      return 'ƒêau ƒë·∫ßu c√≥ th·ªÉ do nhi·ªÅu nguy√™n nh√¢n nh∆∞:\n‚Ä¢ CƒÉng th·∫≥ng, stress\n‚Ä¢ Thi·∫øu ng·ªß\n‚Ä¢ M·∫•t n∆∞·ªõc\n‚Ä¢ C√°c b·ªánh l√Ω kh√°c\n\nT√¥i khuy√™n b·∫°n n√™n:\n1. Ngh·ªâ ng∆°i ƒë·∫ßy ƒë·ªß\n2. U·ªëng nhi·ªÅu n∆∞·ªõc\n3. N·∫øu ƒëau k√©o d√†i, h√£y ƒë·∫∑t l·ªãch kh√°m v·ªõi b√°c sƒ©';
    }
    
    if (msg.includes('gi√°') || msg.includes('chi ph√≠')) {
      return 'B·∫£ng gi√° d·ªãch v·ª• t·∫°i STL Clinic:\n‚Ä¢ Kh√°m t·ªïng qu√°t: 200.000ƒë\n‚Ä¢ Kh√°m chuy√™n khoa: 300.000ƒë - 500.000ƒë\n‚Ä¢ X√©t nghi·ªám: T√πy lo·∫°i\n\nB·∫°n c√≥ th·ªÉ li√™n h·ªá hotline 1900-xxxx ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt.';
    }
    
    if (msg.includes('ƒë·ªãa ch·ªâ') || msg.includes('v·ªã tr√≠')) {
      return 'STL Clinic c√≥ c√°c chi nh√°nh:\nüìç 123 ƒê∆∞·ªùng ABC, Q.1, TP.HCM\nüìç 456 ƒê∆∞·ªùng XYZ, Q.3, TP.HCM\nüìû Hotline: 1900-xxxx\nüïê Gi·ªù l√†m vi·ªác: 8:00 - 20:00 (T2-CN)';
    }
    
    return 'C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá! ƒê·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ t·ªët h∆°n, b·∫°n c√≥ th·ªÉ:\n‚Ä¢ G·ªçi hotline: 1900-xxxx\n‚Ä¢ ƒê·∫∑t l·ªãch tr·ª±c ti·∫øp v·ªõi b√°c sƒ©\n‚Ä¢ Li√™n h·ªá qua email: contact@stlclinic.com';
  };

  const handleSend = () => {
    if (!inputText.trim()) return;

    const userMessage = {
      id: messages.length + 1,
      text: inputText,
      sender: 'user',
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputText('');
    setIsTyping(true);

    // Simulate bot response
    setTimeout(() => {
      const botMessage = {
        id: messages.length + 2,
        text: getBotResponse(inputText),
        sender: 'bot',
        timestamp: new Date()
      };
      setMessages(prev => [...prev, botMessage]);
      setIsTyping(false);
    }, 1000);
  };

  const handleQuickReply = (reply) => {
    setInputText(reply);
  };

  const formatTime = (date) => {
    return date.toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' });
  };

  return (
    <div className="min-h-screen bg-gray-50 flex flex-col">
      {/* Header */}
      <div className="bg-teal-500 text-white p-6 rounded-b-3xl shadow-lg">
        <div className="max-w-4xl mx-auto flex items-center gap-4">
          <button 
            onClick={() => navigate(PAGES.HOME)}
            className="p-2 hover:bg-teal-600 rounded-full transition"
          >
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
            </svg>
          </button>
          <div className="flex items-center gap-3 flex-1">
            <div className="w-12 h-12 bg-white rounded-full flex items-center justify-center">
              <Bot className="w-7 h-7 text-teal-600" />
            </div>
            <div>
              <h1 className="text-xl font-bold">Tr·ª£ l√Ω ·∫£o STL</h1>
              <p className="text-teal-100 text-sm">Lu√¥n s·∫µn s√†ng h·ªó tr·ª£</p>
            </div>
          </div>
        </div>
      </div>

      {/* Messages Area */}
      <div className="flex-1 overflow-y-auto p-6 max-w-4xl mx-auto w-full">
        <div className="space-y-4">
          {messages.map((msg) => (
            <div
              key={msg.id}
              className={`flex ${msg.sender === 'user' ? 'justify-end' : 'justify-start'} animate-fade-in`}
            >
              <div className={`flex gap-3 max-w-[80%] ${msg.sender === 'user' ? 'flex-row-reverse' : ''}`}>
                {/* Avatar */}
                <div className={`w-10 h-10 rounded-full flex items-center justify-center flex-shrink-0 ${
                  msg.sender === 'user' ? 'bg-teal-500' : 'bg-white shadow-md'
                }`}>
                  {msg.sender === 'user' ? (
                    <UserIcon className="w-6 h-6 text-white" />
                  ) : (
                    <Bot className="w-6 h-6 text-teal-600" />
                  )}
                </div>

                {/* Message Bubble */}
                <div>
                  <div className={`px-4 py-3 rounded-2xl ${
                    msg.sender === 'user'
                      ? 'bg-teal-500 text-white rounded-tr-sm'
                      : 'bg-white text-gray-800 shadow-md rounded-tl-sm'
                  }`}>
                    <p className="whitespace-pre-wrap leading-relaxed">{msg.text}</p>
                  </div>
                  <p className="text-xs text-gray-500 mt-1 px-2">
                    {formatTime(msg.timestamp)}
                  </p>
                </div>
              </div>
            </div>
          ))}

          {/* Typing Indicator */}
          {isTyping && (
            <div className="flex justify-start">
              <div className="flex gap-3 max-w-[80%]">
                <div className="w-10 h-10 bg-white rounded-full flex items-center justify-center shadow-md">
                  <Bot className="w-6 h-6 text-teal-600" />
                </div>
                <div className="bg-white px-6 py-3 rounded-2xl rounded-tl-sm shadow-md">
                  <div className="flex gap-1">
                    <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                    <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                    <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.4s' }}></div>
                  </div>
                </div>
              </div>
            </div>
          )}

          <div ref={messagesEndRef} />
        </div>
      </div>

      {/* Quick Replies */}
      {messages.length <= 2 && (
        <div className="px-6 pb-2">
          <div className="max-w-4xl mx-auto">
            <p className="text-sm text-gray-600 mb-2">C√¢u h·ªèi g·ª£i √Ω:</p>
            <div className="flex flex-wrap gap-2">
              {quickReplies.map((reply, index) => (
                <button
                  key={index}
                  onClick={() => handleQuickReply(reply)}
                  className="px-4 py-2 bg-white text-gray-700 rounded-full text-sm hover:bg-teal-50 hover:text-teal-600 transition border border-gray-200"
                >
                  {reply}
                </button>
              ))}
            </div>
          </div>
        </div>
      )}

      {/* Input Area */}
      <div className="bg-white border-t p-4 sticky bottom-0">
        <div className="max-w-4xl mx-auto flex gap-3">
          <input
            type="text"
            placeholder="Nh·∫≠p tin nh·∫Øn..."
            value={inputText}
            onChange={(e) => setInputText(e.target.value)}
            onKeyPress={(e) => e.key === 'Enter' && handleSend()}
            className="flex-1 px-4 py-3 border-2 border-gray-200 rounded-full focus:border-teal-500 focus:outline-none"
          />
          <Button
            variant="primary"
            onClick={handleSend}
            disabled={!inputText.trim()}
            className="rounded-full px-6"
            icon={Send}
          >
            G·ª≠i
          </Button>
        </div>
      </div>
    </div>
  );
};

export default ChatPage;